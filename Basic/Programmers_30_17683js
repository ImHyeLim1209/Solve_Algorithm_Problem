//https://programmers.co.kr/learn/courses/30/lessons/17683
//제출답안1: 한가지 케이스 외에 모두 통과됨

//두 개의 배열을 비교할 때 예를 들어 cdcdf가 cdcdcdf안에 있는지 확인할 때 idx를 이용해서 다음과 같이 비교하면
//cdcdc 지점에서 idx가 0이 되므로 포함되지 않는다고 판단한다.
function solution(m, musicinfos) {
  let result = ["(None)", 0];
  const melody = m.match(/[A-G]#*/g);

  const getMinutes = (start, end) => {
    const ONEHOUR = 60;
    const [startH, startM] = start.split(':');
    const [endH, endM] = end.split(':');

    let min = endM - startM;
    let hour = endH - startH;
    if (min < 0) {
      min += ONEHOUR;
      hour -= 1;
    }
    return hour * ONEHOUR + min;
  }

  const repeatArr = (arr, n) => {
    let result = [];
    while (n > 0) {
      result = result.concat(arr);
      n--;
    }
    return result;
  }

  const getTotalSound = (music, totalMin) => {
    let sounds = music.match(/[A-G]#*/g);
    return repeatArr(sounds, parseInt(totalMin / sounds.length)).concat(sounds.slice(0, totalMin % sounds.length));
  }

  const isInnerArr = (arr1, arr2) => { //여기서 문제 발생!!
    let idx = 0;
    for (const el of arr1) {
      if (el === arr2[idx]) idx++;
      else {
        idx = 0;
      }
      if (idx === arr2.length) return true;
    }
    return false;
  }

  const compareMusic = (music1, music2) => {
    const [_, time1] = music1;
    const [__, time2] = music2;

    if (time2 > time1) return music2;
    return music1;
  }

  for (const musicinfo of musicinfos) {
    const [start, end, title, music] = musicinfo.split(',');
    const totalMin = getMinutes(start, end);
    const totalSound = getTotalSound(music, totalMin);
    if (isInnerArr(totalSound, melody)) result = compareMusic(result, [title, totalMin]);
  }
  return result[0];
}


//새로운 답안: 두 글자가 하나의 값인 경우 두 글자를 사용하지 않는 또 다른 한 글자로 치환한다.
function solution(m, musicinfos) {
  let result = ["(None)", 0];
  const hash = { "C#": "c", "D#": "d", "E#": "e", "F#": "f", "G#": "g", "A#": "a", "B#": "b" };

  const convertMelody = (sounds) => {

    return sounds.match(/[A-G]#*/g).map((sound) => hash[sound] ? hash[sound] : sound).join('');
  }

  const getMinutes = (start, end) => {
    const ONEHOUR = 60;
    const [startH, startM] = start.split(':');
    const [endH, endM] = end.split(':');

    let min = endM - startM;
    let hour = endH - startH;
    if (min < 0) {
      min += ONEHOUR;
      hour -= 1;
    }
    return hour * ONEHOUR + min;
  }

  const getTotalSound = (sounds, totalMin) => {
    return sounds.repeat(parseInt(totalMin / sounds.length)) + sounds.slice(0, totalMin % sounds.length);
  }

  const melody = convertMelody(m);

  for (const musicinfo of musicinfos) {
    const [start, end, title, sounds] = musicinfo.split(',');
    const totalMin = getMinutes(start, end);
    const totalSound = getTotalSound(convertMelody(sounds), totalMin);
    if (totalSound.includes(melody) && totalMin > result[1]) result = [title, totalMin];

  }

  return result[0];
}

// 최근에 만든 코드. 조금 더 체계적이다.
function solution(m, musicinfos) {
  let answer = [["(None)", 0]];
  const hash = { "C#": "c", "D#": "d", "E#": "e", "F#": "f", "G#": "g", "A#": "a", "B#": "b" };

  const covertMelody = (m) => {
    return m.replace(/\w#/g, str => hash[str]);
  }

  const makePlayTime = (startTime, endTime) => {
    const HOUR = 60;
    const [startHour, startMin] = startTime.split(':');
    const [endHour, endMin] = endTime.split(':');

    const hour = (endHour - startHour) * HOUR;
    const min = (endMin - startMin);

    return hour + min;
  }

  const makeFullMusic = (playTime, music) => {
    if (playTime < music.length) return music.slice(0, playTime + 1);
    const repeatNum = Math.floor(playTime / music.length);
    const rest = playTime % music.length;
    return music.repeat(repeatNum) + music.slice(0, rest);
  }

  const melody = covertMelody(m);

  for (const musicInfo of musicinfos) {
    const [startTime, endTime, title, music] = musicInfo.split(",");
    const playTime = makePlayTime(startTime, endTime);
    const fullMusic = makeFullMusic(playTime, covertMelody(music));
    if (fullMusic.includes(melody)) answer.push([title, playTime]);
  }

  return answer.sort((a, b) => b[1] - a[1])[0][0];
}
